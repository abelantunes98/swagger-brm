/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreditorInfo;
import io.swagger.model.PayMethod;
import io.swagger.model.PaymentMethods;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface PaymentmethodsApi {

    @Operation(summary = "Delete a Payment Method", description = "Deletes the payment method that matches the specfied ID.", tags={ "Payment Methods" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The payment method was deleted successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/paymentmethods/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePaymentMethod(@Parameter(in = ParameterIn.PATH, description = "The ID of the payment method.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get All Creditors", description = "Gets either the creditors for a specified bank or all creditors in the system.", tags={ "Payment Methods" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The creditors were returned successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = CreditorInfo.class))),
        
        @ApiResponse(responseCode = "201", description = "The creditors were returned successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = CreditorInfo.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/paymentmethods/sepa/creditors",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CreditorInfo> getCreditorInfo(@Parameter(in = ParameterIn.QUERY, description = "The bank identifier code, such as IANILKU1MAR. If the value is null, it returns all creditors." ,schema=@Schema()) @Valid @RequestParam(value = "bic", required = false) String bic);


    @Operation(summary = "Get Payment Methods for an Account", description = "Returns all payment methods for the specified account.", tags={ "Payment Methods" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The payment methods were returned successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = PaymentMethods.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/paymentmethods/account/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentMethods> getPaymentMethods(@Parameter(in = ParameterIn.PATH, description = "The ID of the account, such as 0.0.0.1+-account+1117902, to get payment methods for.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Create a Payment Method", description = "Creates a payment method for an account.", tags={ "Payment Methods" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The payment method was created successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/paymentmethods",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Resource> savePaymentMethodsonFile(@Parameter(in = ParameterIn.DEFAULT, description = "Information about the new payment method.", schema=@Schema()) @Valid @RequestBody PayMethod body);


    @Operation(summary = "Update a Payment Method", description = "Updates an account's payment method. You can update the following:<ul><li>Contact information</li><li>For credit cards, change the expiration date.</li><li>For direct debit, change the bank number, account number, and account type.</li><li>For invoices, change the invoice ID and the contact method.</li><li>For SEPA, change the IBAN, BIC, and the Unique Mandate Reference number.</li></ul><p>For invoice payments that use email for delivery, the email address is required.", tags={ "Payment Methods" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The payment methods were updated successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/paymentmethods/{id}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Resource> updatePaymentMethods(@Parameter(in = ParameterIn.PATH, description = "The ID of the payment method.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The payment method to modify for the target account. To deassign a bill unit, you must put it in the <b>deassignedBillUnits</b> array; you can't just delete the bill unit from the <b>assignedBillUnits</b> array.", schema=@Schema()) @Valid @RequestBody PayMethod body);

}

