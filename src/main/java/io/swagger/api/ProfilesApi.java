/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ProfileBase;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface ProfilesApi {

    @Operation(summary = "Create a Profile", description = "Creates the specified profile.", tags={ "Profiles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The profile was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/profiles",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Resource> create(@Parameter(in = ParameterIn.DEFAULT, description = "The profile to create.", schema=@Schema()) @Valid @RequestBody ProfileBase body);


    @Operation(summary = "Delete a Profile by ID", description = "Deletes the specified profile.", tags={ "Profiles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The profile was deleted successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/profiles/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletProfile(@Parameter(in = ParameterIn.PATH, description = "The profile ID such as 0.0.0.1+-profile-customer_care+123123.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Delete a Profile by Account or Service", description = "Deletes a profile from the specified account or service.", tags={ "Profiles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The profile was deleted successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/profiles",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletProfile(@Parameter(in = ParameterIn.QUERY, description = "The type of profile to delete." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "The ID of the account to delete a profile from." ,schema=@Schema()) @Valid @RequestParam(value = "accountid", required = false) String accountid, @Parameter(in = ParameterIn.QUERY, description = "The ID of the service to delete a profile from." ,schema=@Schema()) @Valid @RequestParam(value = "serviceid", required = false) String serviceid);


    @Operation(summary = "Get Profile Details", description = "Gets details for the specified profile.", tags={ "Profiles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Details about the profile were returned successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/profiles/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> getProfile(@Parameter(in = ParameterIn.PATH, description = "The profile ID, such as 0.0.0.1+-profile-customer_care+123123.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Profiles for an Account", description = "Gets the profiles for the specified account. <p>Profiles are returned only if the <b>account.profile.types</b> key is set in your <b>CustomConfigurations.xml</b> file. Set <b>account.profile.types</b> to a comma-separated list of profile types to retrieve. For example&colon; <b>account.profile.types=/profile/customer_care,/profile/credit_score</b><p>If <b>account.profile.types</b> is not specified, no profiles will be returned.", tags={ "Profiles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The account-level profiles were returned successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/profiles/account/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> getProfileTypes(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to retrieve profiles for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "profile type to be retrieved" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "Service to retrieve profiles for" ,schema=@Schema()) @Valid @RequestParam(value = "serviceid", required = false) String serviceid);


    @Operation(summary = "Update a Profile", description = "Updates the specified profile.", tags={ "Profiles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The profile was updated successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/profiles",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> save(@Parameter(in = ParameterIn.DEFAULT, description = "The updates to make to the account profile.", schema=@Schema()) @Valid @RequestBody ProfileBase body);

}

