/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.BatchPaymentTemplates;
import io.swagger.model.FormDataContentDisposition;
import io.swagger.model.PaymentBatchFileHeader;
import io.swagger.model.PaymentBatchStatistics;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface BatchpaymentsApi {

    @Operation(summary = "Start or Stop Automatic Batch Payments", description = "Starts or stops the automatic batch payment process.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The batch payment process was started or stopped successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/autoprocess/{autoProcess}",
        method = RequestMethod.POST)
    ResponseEntity<Void> autoProcessBatchPayments(@Parameter(in = ParameterIn.PATH, description = "Whether to start the automatic batch payment process (<b>true</b>) or stop the automatic batch payment process (<b>false</b>).", required=true, schema=@Schema()) @PathVariable("autoProcess") Boolean autoProcess);


    @Operation(summary = "Get Batch Payment Templates", description = "Gets the batch payment templates either from the path specified during installation or from the local configured location. The returned BatchPaymentTemplates contain the batch name and the template name.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of batch payment templates was returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BatchPaymentTemplates.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/templates",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BatchPaymentTemplates>> getAvailableTemplates();


    @Operation(summary = "Get a Batch Payment File by File Name", description = "Gets the batch payment file that matches the specified file name. <p>The response contains the contents of the batch payment file in text format.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The batch payment file was returned successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/viewfile/{fileName}",
        method = RequestMethod.GET)
    ResponseEntity<Void> getBatchPaymentsFile(@Parameter(in = ParameterIn.PATH, description = "The name of the batch payment file.", required=true, schema=@Schema()) @PathVariable("fileName") String fileName);


    @Operation(summary = "Get Unprocessed Batch Payment Files", description = "Gets all unprocessed batch payment files.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of unprocessed batch payments was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentBatchFileHeader.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/unprocessed",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentBatchFileHeader> getUnProcessedBatchPayments();


    @Operation(summary = "Check If a Batch File Was Processed", description = "Checks if the batch file named <i>filename</i> is already committed to the system. If it's already committed, it returns a count greater than 0.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "If the file was already processed, an integer greater than zero is returned."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/filecount/{fileName}",
        method = RequestMethod.GET)
    ResponseEntity<Void> isFileAlreadyProcessed(@Parameter(in = ParameterIn.PATH, description = "The name of the batch file to check.", required=true, schema=@Schema()) @PathVariable("fileName") String fileName);


    @Operation(summary = "Get Batch Payment Files", description = "Gets the list of batch payment files. This method polls the <b>Unprocessed</b>, <b>Processing</b>, and <b>Error</b> folders and, if there are any changes in a folder, it returns information about the batch payment files.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of batch payment files was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentBatchFileHeader.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/poll",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentBatchFileHeader> pollForBatchPayments();


    @Operation(summary = "Process Batch Payments", description = "Processes batch payment files and submits the payments upon successful validation.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The batch payments were processed successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentBatchStatistics.class))),
        
        @ApiResponse(responseCode = "201", description = "The batch payments were processed successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/process",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<PaymentBatchStatistics> processBatchPayments(@Parameter(in = ParameterIn.QUERY, description = "Whether to automatically retry processing the batch payments if a failure occurs (<b>true</b>) or not (<b>false</b>)." ,schema=@Schema()) @Valid @RequestParam(value = "retry", required = false) Boolean retry, @Parameter(in = ParameterIn.QUERY, description = "What to do when the number of suspended payments in a batch file has exceeded a pre-configured threshold:<ul><li><b>true</b> specifies to override the threshold checkpoint and proceed with submitting the payments.</li><li><b>false</b> specifies to stop processing the batch file and roll back any successful allocations in the payment batch.</li></ul> " ,schema=@Schema()) @Valid @RequestParam(value = "overrideThreshold", required = false) Boolean overrideThreshold, @Parameter(in = ParameterIn.DEFAULT, description = "The header information for the batch payment file, such as the institution name, file name, and so on. The minimum required parameters are&colon; <ul><li><b>currency</b></li><li><b>fileCreationDate</b></li><li><b>fileName</b></li><li><b>institutionName</b></li><li><b>lockBoxId</b></li><li><b>templateName</b></li></ul>", schema=@Schema()) @Valid @RequestBody PaymentBatchFileHeader body);


    @Operation(summary = "Upload a Batch Payment File", description = "Imports a payment batch file, validates its content, and then uploads it to a directory.", tags={ "Batch Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The batch payment file was uploaded successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentBatchFileHeader.class))),
        
        @ApiResponse(responseCode = "201", description = "The batch payment file was uploaded successfully. The batch payment file header details such as the file name, file creation date, number of payments, and institution name are returned."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/batchpayments/upload",
        produces = { "application/json", "application/xml" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<PaymentBatchFileHeader> uploadBatchPaymentFile(@Parameter(in = ParameterIn.QUERY, description = "Whether to override an older version of the batch payment file (<b>true</b>) or not (<b>false</b>)." ,schema=@Schema()) @Valid @RequestParam(value = "override", required = false) Boolean override, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="filename", required=false)  String filename, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="file", required=false)  FormDataContentDisposition file);

}

