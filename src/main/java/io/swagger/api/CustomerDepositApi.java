/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.APIError;
import io.swagger.model.CustomerDeposit;
import io.swagger.model.DepositOrder;
import io.swagger.model.EntityRef;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface CustomerDepositApi {

    @Operation(summary = "Create a Customer Deposit with Payments", description = "Creates a customer deposit order with payments.", tags={ "Deposits" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The customer deposit was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EntityRef.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "403", description = "The server understood the request but refuses to authorize it.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "404", description = "The server could not find the requested object.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "409", description = "The request could not be processed due to conflict. An item already exists.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable entity. The server understands the request but is unable to process the instructions.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "503", description = "Service unavailable. The server is currently unable to handle the request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))) })
    @RequestMapping(value = "/customerDeposit/order",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EntityRef> addCustomerDepositOrder(@Parameter(in = ParameterIn.DEFAULT, description = "The customer deposit to create. The minimum required parameters are:<ul><li><b>customerDeposit</b></li></ul>", schema=@Schema()) @Valid @RequestBody DepositOrder body);


    @Operation(summary = "Get a Customer Deposit by ID", description = "Gets the customer deposit with the specified ID.", tags={ "Deposits" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The customer deposit details was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerDeposit.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "403", description = "The server understood the request but refuses to authorize it.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "404", description = "The server could not find the requested object.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "409", description = "The request could not be processed due to conflict. An item already exists.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable entity. The server understands the request but is unable to process the instructions.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "503", description = "Service unavailable. The server is currently unable to handle the request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))) })
    @RequestMapping(value = "/customerDeposit/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerDeposit> getCustomerDepositById(@Parameter(in = ParameterIn.PATH, description = "The customer deposit ID.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Customer Deposits", description = "Gets the customer deposits that match the query criteria.", tags={ "Deposits" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The customer deposits were returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerDeposit.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "403", description = "The server understood the request but refuses to authorize it.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "404", description = "The server could not find the requested object.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "409", description = "The request could not be processed due to conflict. An item already exists.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable entity. The server understands the request but is unable to process the instructions.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "503", description = "Service unavailable. The server is currently unable to handle the request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))) })
    @RequestMapping(value = "/customerDeposit",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CustomerDeposit>> searchCustomerDeposit(@Parameter(in = ParameterIn.QUERY, description = "The customer deposit reference." ,schema=@Schema()) @Valid @RequestParam(value = "customerRef", required = false) String customerRef, @Parameter(in = ParameterIn.QUERY, description = "The service reference." ,schema=@Schema()) @Valid @RequestParam(value = "serviceRef", required = false) String serviceRef, @Parameter(in = ParameterIn.QUERY, description = "The bill profile reference." ,schema=@Schema()) @Valid @RequestParam(value = "billProfileRef", required = false) String billProfileRef, @Parameter(in = ParameterIn.QUERY, description = "The deposit specification reference." ,schema=@Schema()) @Valid @RequestParam(value = "depositSpecRef", required = false) String depositSpecRef, @Parameter(in = ParameterIn.QUERY, description = "The deposit specification status." ,schema=@Schema()) @Valid @RequestParam(value = "status", required = false) String status, @Parameter(in = ParameterIn.QUERY, description = "The deposit specification expiry date." ,schema=@Schema()) @Valid @RequestParam(value = "expiresAt", required = false) String expiresAt, @Min(0)@Parameter(in = ParameterIn.QUERY, description = "The position from where the fetch records must start." ,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "The maximum number of records to be displayed in a page." ,schema=@Schema(allowableValues={  }, maximum="50"
)) @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @Operation(summary = "Update a Customer Deposit", description = "Updates the specified customer deposit.", tags={ "Deposits" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The customer deposit object was updated successfully."),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "403", description = "The server understood the request but refuses to authorize it.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "404", description = "The server could not find the requested object.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "409", description = "The request could not be processed due to conflict. An item already exists.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable entity. The server understands the request but is unable to process the instructions.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))),
        
        @ApiResponse(responseCode = "503", description = "Service unavailable. The server is currently unable to handle the request.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = APIError.class))) })
    @RequestMapping(value = "/customerDeposit/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateCustomerDeposit(@Parameter(in = ParameterIn.PATH, description = "The customer deposit object ID.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The customer deposit to update. The minimum required parameters are:<ul><li><b>customerRef</b></li><li><b>DepositSpecRef</b></li><li><b>totalAmount</b></li></ul>", schema=@Schema()) @Valid @RequestBody CustomerDeposit body);

}

