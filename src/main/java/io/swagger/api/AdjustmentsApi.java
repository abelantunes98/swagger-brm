/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AdjustmentAccount;
import io.swagger.model.AdjustmentBill;
import io.swagger.model.AdjustmentDetails;
import io.swagger.model.AdjustmentEvent;
import io.swagger.model.AdjustmentItem;
import io.swagger.model.AdjustmentNonCurrencyBalance;
import io.swagger.model.ArActionsList;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface AdjustmentsApi {

    @Operation(summary = "Create an Account-Level Adjustment", description = "Creates an account-level adjustment for the specified account.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The adjustment was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/account/{id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Resource> adjustAccount(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to adjust.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Information about the account-level adjustment. The minimum required parameter is <b>amount</b>.", schema=@Schema()) @Valid @RequestBody AdjustmentAccount body);


    @Operation(summary = "Adjust a Bill's Currency Balance", description = "Performs a currency balance adjustment for the specified bill.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The bill's currency was adjusted successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AdjustmentBill.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/bill/{id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<AdjustmentBill> adjustBill(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill to adjust.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Information about the adjustment. The minimum required parameter is <b>amount</b>.", schema=@Schema()) @Valid @RequestBody AdjustmentBill body);


    @Operation(summary = "Create an Event Adjustment", description = "Creates an event-level adjustment for the account specified in the payload's contents.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The event adjustment was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AdjustmentEvent.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/event",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<AdjustmentEvent> adjustEvent(@Parameter(in = ParameterIn.DEFAULT, description = "Information about the event-level adjustment. The minimum required parameters are&colon;<ul><li><b>accountRef</b><ul><li><b>id</b></li></ul></li><li><b>amount</b></li><li><b>events</b><ul><li><b>eventRef</b><ul><li><b>id</b></li></ul></li></ul></li></ul>", schema=@Schema()) @Valid @RequestBody AdjustmentEvent body);


    @Operation(summary = "Adjust an A/R Item's Currency Balance", description = "Adjusts the currency balance for the specified A/R item. For example, provide a $5 credit adjustment for a purchase fee.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The A/R item's currency balance was adjusted successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AdjustmentBill.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/item/{id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<AdjustmentBill> adjustItem(@Parameter(in = ParameterIn.PATH, description = "The ID of the A/R item.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the item-level adjustment. The minimum required parameter is&colon; <b>amount</b>.", schema=@Schema()) @Valid @RequestBody AdjustmentItem body);


    @Operation(summary = "Adjust a Noncurrency Balance", description = "Adjusts the specified noncurrency balance.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The noncurrency balance was adjusted successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Resource.class))) })
    @RequestMapping(value = "/adjustments/noncurrency",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Resource> adjustNonCurrencyBalance(@Parameter(in = ParameterIn.DEFAULT, description = "Details about the adjustment. The minimum required parameters are&colon; <ul><li><b>accountRef</b><ul><li><b>id</b></li></ul></li><li><b>amount</b></li><li><b>balanceGroupRef</b><ul><li><b>id</b></li></ul></li><li><b>validFrom</b></li><li><b>validTo</b></li></ul>", schema=@Schema()) @Valid @RequestBody AdjustmentNonCurrencyBalance body);


    @Operation(summary = "Get Details About an Adjustment", description = "Gets the details about the adjustment that matches the specified ID.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The adjustment details were returned successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = AdjustmentDetails.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AdjustmentDetails> getAdjustmentDetails(@Parameter(in = ParameterIn.PATH, description = "The ID of the adjustment, such as 0.0.0.1+-item-adjustment+73707.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get All Adjustments for an Account", description = "Gets the list of adjustments for the specified account ID.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of adjustments was returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = ArActionsList.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/account/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ArActionsList>> getAdjustments(@Parameter(in = ParameterIn.PATH, description = "The ID of the account.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The type of adjustments to retrieve. The type can be&colon;<ul><li><b>unallocated</b>&colon; Gets only unallocated adjustments.</li><li><b>allocated</b>&colon; Gets only allocated adjustments.</li><li><b>all</b>&colon; Gets all adjustments. This is the default.</li></ul>" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type);


    @Operation(summary = "Get Adjustments for a Bill Unit", description = "Gets all adjustments for the specified bill unit that match the query criteria.", tags={ "Adjustments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of adjustments was returned successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/adjustments/billunit/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> getAdjustmentsForBillUnit(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The type of adjustments to retrieve. The type can be&colon;<ul><li><b>unallocated</b>&colon; Gets only unallocated adjustments.</li><li><b>allocated</b>&colon; Gets only allocated adjustments.</li><li><b>all</b>&colon; Gets all adjustments. This is the default.</li></ul>" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type);

}

