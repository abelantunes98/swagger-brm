/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.BillUnitServices;
import io.swagger.model.Bundle;
import io.swagger.model.BundleList;
import io.swagger.model.BundleOffers;
import io.swagger.model.BundleTransition;
import io.swagger.model.Configurations;
import io.swagger.model.CustomerAssets;
import io.swagger.model.CustomerPackages;
import io.swagger.model.CustomizedBundleForPurchase;
import io.swagger.model.CustomizedOffers;
import io.swagger.model.Offer;
import io.swagger.model.OverriddenCharges;
import io.swagger.model.PackageList;
import io.swagger.model.PackageTransition;
import io.swagger.model.SubscriptionPreviewCancellationCharges;
import io.swagger.model.SubscriptionTerms;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface SubscriptionsApi {

    @Operation(summary = "Update Dynamic Charges for a Purchased Product", description = "Adds dynamic charges or updates existing dynamic charges for the purchased product with the specified ID.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The dynamic charges were updated successfully."),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/offer/{id}/overridecharges",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> addOrUpdateDynamicCharge(@Parameter(in = ParameterIn.PATH, description = "The ID of the purchased product or discount to update dynamic charges for. For example: 0.0.0.1+-purchased_product+123123", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the dynamic charges to create or update. The minimum required parameters are: <ul><li><b>event</b></li><li><b>charges</b></li></ul>", schema=@Schema()) @Valid @RequestBody List<OverriddenCharges> body);


    @Operation(summary = "Cancel a Subscriber's Contract", description = "Cancels the subscriber's contract that is passed in the request payload.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The subscriber's contract was canceled successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/cancel/contract",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> cancelSubscriberContract(@Parameter(in = ParameterIn.DEFAULT, description = "Details about the contract to cancel.", schema=@Schema()) @Valid @RequestBody SubscriptionTerms body);


    @Operation(summary = "Create Dynamic Charges for a Purchased Product", description = "Creates dynamic charges for the purchased product with the specified ID.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The dynamic charges were created successfully."),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/offer/{id}/overridecharges",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createDynamicCharge(@Parameter(in = ParameterIn.PATH, description = "The ID of the purchased product or discount to create dynamic charges for. For example: 0.0.0.1+-purchased_product+123123", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the dynamic charges to create. The minimum required parameters are: <ul><li><b>event</b></li><li><b>charges</b></li></ul>", schema=@Schema()) @Valid @RequestBody List<OverriddenCharges> body);


    @Operation(summary = "Delete Dynamic Charges for a Purchased Product", description = "Deletes dynamic charges for the purchased product with the specified ID. You can delete all charges by providing no request body, or delete charges based on date ranges or price tags by specifying them in the request body.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The charges were deleted successfully."),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/offer/{id}/overridecharges",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDynamicCharge(@Parameter(in = ParameterIn.PATH, description = "The ID of the purchased product or discount to delete dynamic charges from. For example: 0.0.0.1+-purchased_product+123123", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the dynamic charges to delete. The minimum required parameters are: <ul><li><b>event</b></li><li><b>charges</b></li></ul>", schema=@Schema()) @Valid @RequestBody List<OverriddenCharges> body);


    @Operation(summary = "Get Purchased Account-Level Bundles", description = "Gets a list of purchased account-level bundles. Values are returned for the <b>name</b> and <b>description</b> parameters only, all others are <b>null</b>.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bundles for the account.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BundleList.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/account/{id}/bundledetails",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BundleList> getAccountLevelBundleDetails(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to get bundles for.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Purchased Bundles for a Service", description = "Gets a list of purchased bundles. Values are returned for the <b>name</b> and <b>description</b> parameters only, all others are <b>null</b>.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bundles for the service.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BundleList.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/service/{id}/bundledetails",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BundleList> getBundleDetails(@Parameter(in = ParameterIn.PATH, description = "The ID of the service to get bundles for.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Bundles for a Service", description = "Gets the bundles for the specified service ID.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bundles were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BundleOffers.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/service/{id}/bundleoffers",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BundleOffers> getBundleOffers(@Parameter(in = ParameterIn.PATH, description = "The ID of the service to get.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Bundles and Offers for Services", description = "Gets the bundles and their associated charge offers and discount offers for one or more services.<p><b>Note</b>: Even though this is a POST request, it does not create or update anything in BRM.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bundles were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BundleOffers.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/service/bundleoffers",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<BundleOffers> getBundleOffersForServices(@Parameter(in = ParameterIn.DEFAULT, description = "The request body consists of a list of one or more services.", schema=@Schema()) @Valid @RequestBody List<String> body);


    @Operation(summary = "Get Bundles for Purchase", description = "Gets the list of bundles that are available for purchase.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of bundles was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BundleList.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/bundles/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BundleList> getBundles(@Parameter(in = ParameterIn.PATH, description = "The ID for the service type for which the associated bundles need to be retrieved. For example, 0.0.0.1+-service-email+62503 to retrieve the bundles for the email service type.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Whether to include the charge and discount offer details (<b>offers</b>) or not (any other value)." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand);


    @Operation(summary = "Preview Cancellation Charges", description = "Calculates the early termination charges for the account and contract passed in the request payload.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The cancellation charges were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubscriptionPreviewCancellationCharges.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/preview/cancellation/charges",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<SubscriptionPreviewCancellationCharges> getCancellationFeeForSubscriptions(@Parameter(in = ParameterIn.DEFAULT, description = "Details about the account and contract.", schema=@Schema()) @Valid @RequestBody SubscriptionPreviewCancellationCharges body);


    @Operation(summary = "Get Services for an Account", description = "Gets the services for an account grouped by bill unit. These services optionally include the charge offers and discount offers sorted in descending order of the purchase date and ascending order of the purchase end date.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The services were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerAssets.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/account/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerAssets> getCustomerAssets(@Parameter(in = ParameterIn.PATH, description = "The ID of the account, such as 0.0.0.1+-account+123123.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Whether to include charge offers and discount offers in the service (<b>offers</b>) or not (any other value). The offers are included by default. Use <b>includechild</b> to include assets from child accounts as well." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand);


    @Operation(summary = "Get Contracts for an Account", description = "Gets the list of contracts for the specified account. <p><b>Note</b>: A contract consists of a purchased package and its subscription terms.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The contracts were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerPackages.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/account/{id}/packages",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerPackages> getCustomerPackages(@Parameter(in = ParameterIn.PATH, description = "The ID of the account, such as 0.0.0.1+-account+324454.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Customized Charge Offers for a Service", description = "Gets all customized charge offers that match the specified service ID.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of customized charge offers was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomizedOffers.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/service/{id}/customizedoffers",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomizedOffers> getCustomizedOffers(@Parameter(in = ParameterIn.PATH, description = "The ID of the service.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Customized Account Offers", description = "Gets a list of customized account-level offers for an account.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of customized account-level offers was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomizedOffers.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/account/{id}/customizedoffers",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomizedOffers> getCustomizedOffersForAccount(@Parameter(in = ParameterIn.PATH, description = "The ID of the account.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Offer Details", description = "Gets the details for the charge or discount offer that matches the specified ID.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The offer details were retrieved successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Offer.class))),
        
        @ApiResponse(responseCode = "404", description = "The specified ID was not found."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/offers/{offerId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Offer> getOfferDetails(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("offerId") String offerId);


    @Operation(summary = "Get Packages for Purchase", description = "Gets the list of packages that are available for purchase.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of packages was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PackageList.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/packages",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<PackageList> getPackages(@Parameter(in = ParameterIn.QUERY, description = "The optional name of the package list. If it isn't specified, the default package list is used." ,schema=@Schema()) @Valid @RequestParam(value = "packagelist", required = false) String packagelist, @Parameter(in = ParameterIn.QUERY, description = "The type of package list, which can be <b>new</b> or <b>addon</b>." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "Whether to include the charge and discount offer details (<b>offers</b>) or not (any other value)." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand, @Parameter(in = ParameterIn.QUERY, description = "The ID of the account that is purchasing the package. If passed, it returns packages from its native schema." ,schema=@Schema()) @Valid @RequestParam(value = "accountId", required = false) String accountId);


    @Operation(summary = "Get Bundles for an Account", description = "Gets the list of bundles that the specified account has purchased.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of purchased bundles was returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Bundle.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/purchasedbundles/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Bundle>> getPurchasedBundles(@Parameter(in = ParameterIn.PATH, description = "The ID of the account, such as 0.0.0.1+-account+324454.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Packages for an Account", description = "Gets the list of packages that the specified account has purchased.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of packages was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PackageList.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/purchasedpackages/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<PackageList> getPurchasedPackages(@Parameter(in = ParameterIn.PATH, description = "The ID of the account, such as 0.0.0.1+-account+324454.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Service Details", description = "Get the details for the service that matches the specified ID.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The service details were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BillUnitServices.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/service/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BillUnitServices> getServiceDetails(@Parameter(in = ParameterIn.PATH, description = "The ID of the service, such as 0.0.0.1+-service-telco-gsm-sms+367516.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Subscription Terms For Bundles", description = "Gets the subscription terms for the specified account and bundles.<p><b>Note</b>: Even though this is a POST request, it does not create or update anything in BRM.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The subscription terms for deals were retrieved successfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SubscriptionTerms.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/deals/terms",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<SubscriptionTerms>> getSubscriptionTermsForDeals(@Parameter(in = ParameterIn.QUERY, description = "The ID of the account." ,schema=@Schema()) @Valid @RequestParam(value = "accountId", required = false) String accountId, @Parameter(in = ParameterIn.DEFAULT, description = "The request body consists of a list of one or more bundles.", schema=@Schema()) @Valid @RequestBody List<String> body);


    @Operation(summary = "Get Bundles for Transition", description = "Gets the list of bundles that the specified bundle can transition to with the specified transition type.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of bundles was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BundleList.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/bundles/{id}/transition",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BundleList> getTransitionBundles(@Parameter(in = ParameterIn.PATH, description = "The ID of the bundle, such as 0.0.0.1+-deal+434221.", required=true, schema=@Schema()) @PathVariable("id") String id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The type of transition, which can be upgrade (<b>1</b>), downgrade (<b>2</b>), generation change (<b>3</b>), red (<b>101</b>), blue (<b>102</b>), or green (<b>103</b>)." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "type", required = true) Integer type);


    @Operation(summary = "Get Packages for Transition", description = "Gets the list of packages that the specified package can transition to with the specified transition type.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of packages was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PackageList.class))),
        
        @ApiResponse(responseCode = "500", description = "EAn internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/packages/{id}/transition",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<PackageList> getTransitionPackages(@Parameter(in = ParameterIn.PATH, description = "The ID of the package, such as 0.0.0.1+-plan+384657.", required=true, schema=@Schema()) @PathVariable("id") String id, @NotNull @Parameter(in = ParameterIn.QUERY, description = "The transition type, which can be&colon; <ul><li><b>1</b>&colon; Upgrade</li><li><b>2</b>&colon; Downgrade</li><li><b>3</b>&colon; Generation change</li> <li><b>101</b>&colon; Red</li><li><b>102</b>&colon; Blue</li><li><b>103</b>&colon; Green</li></ul>" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "type", required = true) Integer type);


    @Operation(summary = "Get Transition Types", description = "Gets the list of transition types.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of transition types was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Configurations.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/transitiontypes",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Configurations> getTransitionTypes();


    @Operation(summary = "Get Unpurchased Bundles for a Package", description = "Gets the list of unpurchased optional bundles that are available to a customer that has purchased a given package.<p><b>Note</b>: Even though this is a POST request, it does not create or update anything in BRM.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of available bundles were returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Bundle.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/unpurchased/bundles/{packageId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Bundle>> getUnpurchasedOptionalBundles(@Parameter(in = ParameterIn.PATH, description = "The package ID, such as 0.0.0.1+-plan+740903.", required=true, schema=@Schema()) @PathVariable("packageId") String packageId, @Parameter(in = ParameterIn.DEFAULT, description = "The list of optional bundles that the customer has already purchased.", schema=@Schema()) @Valid @RequestBody List<String> body);


    @Operation(summary = "Modify a Contract's Auto-Renewal Preferences", description = "Modifies the auto-renewal preferences for a subscriber's contract.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The subscriber's contract was updated successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/contract",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> modifySubscriberContract(@Parameter(in = ParameterIn.DEFAULT, description = "Details about the contract to modify.", schema=@Schema()) @Valid @RequestBody SubscriptionTerms body);


    @Operation(summary = "Transition Account to New Bundle", description = "Transitions the specified account from one bundle to a different bundle. The old bundle is canceled and the new one is purchased.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bundle transition completed successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/account/{id}/bundle/transition",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> performBundleTransition(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to transition.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The transition details, such as the old bundle, the new bundle, and the transition type.", schema=@Schema()) @Valid @RequestBody BundleTransition body);


    @Operation(summary = "Transition Account to New Package", description = "Transitions the specified account from one package to another package. The old package is canceled, and the new one is purchased.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The package was transitioned successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/account/{id}/package/transition",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> performPackageTransition(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to transition.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The package transition details, such as the new package, existing package, and transition type.", schema=@Schema()) @Valid @RequestBody PackageTransition body);


    @Operation(summary = "Update Offer Details for a Purchased Product or Discount", description = "Updates the details of a purchased product or discount. For example, updates the purchase fee, cycle start date, or usage discount amount.", tags={ "Subscriptions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The offer details were updated successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/subscriptions/offerdetails/{id}",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateOfferings(@Parameter(in = ParameterIn.PATH, description = "The ID for the purchased product or discount to modify, such as 0.0.0.1+-purchased_product+209130.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the offer details to update. The minimum required parameters are&colon;<ul><li>Either <b>customizedChargeOffers</b> or <b>customizedDiscountOffers</b></li><li>The field to be updated</li></ul>", schema=@Schema()) @Valid @RequestBody CustomizedBundleForPurchase body);

}

