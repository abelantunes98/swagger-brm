/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DeferredAction;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface DeferredactionsApi {

    @Operation(summary = "Delete a Deferred Action", description = "Deletes the specified deferred action.", tags={ "Deferred Action" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The deferred action was deleted successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/deferredactions/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDeferredAction(@Parameter(in = ParameterIn.PATH, description = "The ID of the deferred action, such as 0.0.0.1+-schedule+123123.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Perform a Deferred Action", description = "Performs the specified deferred action.", tags={ "Deferred Action" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The deferred action was executed successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeferredAction.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/deferredactions/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<DeferredAction> executeDeferredAction(@Parameter(in = ParameterIn.PATH, description = "The ID of the deferred action, such as 0.0.0.1+-schedule+123123.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Deferred Actions for an Account", description = "Gets the deferred actions for the account that matches the specified ID.", tags={ "Deferred Action" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of deferred actions was returned successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = DeferredAction.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/deferredactions/account/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DeferredAction> getDeferredActions(@Parameter(in = ParameterIn.PATH, description = "The account ID, such as 0.0.0.1+-account+123123.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Modify a Deferred Action", description = "Modifies the specified deferred action.", tags={ "Deferred Action" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The deferred action was modified successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeferredAction.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/deferredactions/{id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<DeferredAction> modifyDeferredAction(@Parameter(in = ParameterIn.PATH, description = "The ID of the deferred action, such as 0.0.0.1+-schedule+123123.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the deferred action.", schema=@Schema()) @Valid @RequestBody DeferredAction body);

}

