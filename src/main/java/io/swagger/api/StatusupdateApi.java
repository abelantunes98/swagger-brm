/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.OfferStatus;
import org.springframework.core.io.Resource;
import io.swagger.model.Status;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface StatusupdateApi {

    @Operation(summary = "Update an Account's Status", description = "Updates the status of the account that matches the specified ID.", tags={ "Status Update" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The status of the account was updated successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/statusupdate/account/{id}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Resource> changeAccountStatus(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to update, such as 0.0.0.1+-account+123123.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The status details. The minimum required parameters are&colon;<ul><li><b>statusCode</b></li><li><b>effective</b>, if the status changes are deferred or backdated</li></ul>", schema=@Schema()) @Valid @RequestBody Status body);


    @Operation(summary = "Update an Offer's Status", description = "Updates the status of the offer specified in the body.", tags={ "Status Update" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The offer's status was updated successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/statusupdate/offers",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> changeOffersStatus(@Parameter(in = ParameterIn.DEFAULT, description = "The offer's status details. The minimum required parameters are&colon;<ul><li><b>statusCode</b></li><li><b>effectiveDate</b>, if the status changes are deferred or backdated</li></ul>", schema=@Schema()) @Valid @RequestBody OfferStatus body);


    @Operation(summary = "Update a Service's Status", description = "Updates the status of the service that matches the specified ID.", tags={ "Status Update" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The service's status was updated successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/statusupdate/service/{id}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Resource> changeServiceStatus(@Parameter(in = ParameterIn.PATH, description = "The ID of the service to update, such as 0.0.0.1+-service-ip+123123.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The status details. The minimum required parameters are&colon;<ul><li><b>statusCode</b></li><li><b>effectiveWhen</b>, if the status changes are deferred or backdated</li></ul>", schema=@Schema()) @Valid @RequestBody Status body);

}

