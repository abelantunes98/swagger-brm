/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ArActionsList;
import io.swagger.model.BillDetails;
import io.swagger.model.BillItem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface ItemsApi {

    @Operation(summary = "Get A/R Actions for a Bill Item", description = "Gets the list of A/R actions associated with the specified bill item.", tags={ "Items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The A/R actions were returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = ArActionsList.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/items/{id}/ar-actions",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ArActionsList>> getARActions1(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill item.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get A/R Item Number", description = "Gets the accounts receivable (A/R) item number for the specified A/R item. The item number is returned for both billable and non-billable A/R actions, such as adjustments, write offs, refunds, and payments.", tags={ "Items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The A/R item number was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/items/{id}/itemid",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getARItemNo(@Parameter(in = ParameterIn.PATH, description = "The ID for the internal A/R item, such as 0.0.0.1+-item-adjustment+293824691314016398.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Bill Items by Bill and Service ID", description = "Gets the bill items for the specified bill and service. The bill items are grouped based on service type.", tags={ "Items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill items were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BillDetails.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/items/bill/{id}/by-service",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BillDetails> getBillItemDetails(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The accepted values are&colon;<ul><li><b>parentonly</b> retrieves only charges made by the parent.</li><li><b>childonly</b> retrieves only the child charges.</li><li><b>all</b> retrieves charges from the parent and all children.</li></ul>" ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand, @Parameter(in = ParameterIn.QUERY, description = "The service ID, which could be a login ID or a device ID to get specific items for that service. The default is to return all services." ,schema=@Schema()) @Valid @RequestParam(value = "serviceID", required = false) String serviceID);


    @Operation(summary = "Get Bill Items for an Account", description = "Gets all bill items for the specified account.", tags={ "Items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill items were returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = BillItem.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/items/account/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BillItem>> getBillItems(@Parameter(in = ParameterIn.PATH, description = "The ID of the account, such as 0.0.0.1+-account+123123, to get bill items for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The type of bill items to retrieve: <ul><li><b>open</b> retrieves all bill items regardless of the due date.</li><li><b>past</b> retrieves only bill items whose due date has already passed.</li></ul>" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "The number of bill items to return." ,schema=@Schema()) @Valid @RequestParam(value = "count", required = false) Integer count, @Parameter(in = ParameterIn.QUERY, description = "The additional details to include in the response. Enter <b>all</b> to return bill items for the parent account and all of its child accounts. Enter <b>childonly</b> to return bill items for only the child accounts associated with a parent account." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand);


    @Operation(summary = "Get a Bill Item", description = "Gets the bill items that match the specified query parameters.", tags={ "Items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill item was returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = BillItem.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/items/billunit/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BillItem>> getIndividualBillItems(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The type of bill items to retrieve: <b>open</b> or <b>past</b>. Open retrieves all bill items irrespective of the due date. Past retrieves only the bill items whose due date has passed." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "The number of bill items to retrieve." ,schema=@Schema()) @Valid @RequestParam(value = "count", required = false) Integer count, @Parameter(in = ParameterIn.QUERY, description = "Whether to retreive the bill items for the parent bill unit and its child bill units (<b>all</b>) or just the child bill units (<b>childonly</b>)." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand);


    @Operation(summary = "Get Bill Items for a Bill", description = "Gets the bill items that are associated with the specified bill. You can optionally specify to retrieve only open, pending, closed, or all bill items for the bill.", tags={ "Items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill items were returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = BillItem.class)))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/items/bill/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BillItem>> getItemsForBill(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The type of bill items to retrieve:<ul><li><b>open</b> retrieves all open bill items.</li><li><b>pending</b> retrieves all pending bill items.</li><li><b>closed</b> retrieves all closed bill items.</li><li><b>all</b> retrieves all bill items. This is the default.</li></ul>" ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type);

}

