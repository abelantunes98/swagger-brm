/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Notes;
import io.swagger.model.NotesInfo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface NotesApi {

    @Operation(summary = "Create a Note", description = "Creates a new note or adds a follow-up comment to an existing note.", tags={ "Notes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The note was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NotesInfo.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/notes",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<NotesInfo> createNotes(@Parameter(in = ParameterIn.DEFAULT, description = "Details about the new note or follow-up comment. The minimum required parameters are&colon;<ul><li><b>notes</b><ul><li><b>accountId</b></li><li>For new notes only, you must also include the <b>type</b> and <b>subtype</b> parameters</li></ul>", schema=@Schema()) @Valid @RequestBody NotesInfo body);


    @Operation(summary = "Get Notes for a Bill Unit", description = "Retrieves the list of notes, along with their follow-up comments, for a bill unit.", tags={ "Notes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The notes were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NotesInfo.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/notes/billunit/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<NotesInfo> getAllNotes(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The start date of the notes in milliseconds, such as 1444209849879. This parameter is optional." ,schema=@Schema()) @Valid @RequestParam(value = "starts", required = false) String starts, @Parameter(in = ParameterIn.QUERY, description = "The end date of the notes in milliseconds, such as 1444209849879. This parameter is optional." ,schema=@Schema()) @Valid @RequestParam(value = "ends", required = false) String ends);


    @Operation(summary = "Get Notes for a Bill Item", description = "Retrieves the list of notes, along with their follow-up comments, for a bill item.", tags={ "Notes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of notes were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Notes.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/notes/item/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Notes> getAllNotesforItemId(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill item, such as 0.0.0.1+-item-payment+295196881825603320.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Notes for a Transaction", description = "Retrieves the list of notes, along with their associated comments, for the specified transaction.", tags={ "Notes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The notes were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Notes.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/notes/transaction/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Notes> getAllNotesforTransactionId(@Parameter(in = ParameterIn.PATH, description = "The transaction ID of the payment, such as T1,a,0.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Notes for an Account", description = "Gets the notes associated with the specified account.", tags={ "Notes" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The notes associated with the account", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Notes.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/notes/account/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Notes>> getNotesforAccount(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to get the notes for. For example, <b>0.0.0.1+-account+1117902</b>.", required=true, schema=@Schema()) @PathVariable("id") String id);

}

