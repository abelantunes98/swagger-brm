/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.model.AccountSummary;
import io.swagger.model.BillUnit;
import io.swagger.model.BillUnitHierarchy;
import io.swagger.model.ChangeValidity;
import io.swagger.model.CreditLimit;
import io.swagger.model.NewBillUnit;
import io.swagger.model.TransferBalance;
import io.swagger.model.TransferBalanceCreateResponse;
import io.swagger.model.TransferBalanceDetails;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface BillunitsApi {

    @Operation(summary = "Add a Bill Unit to a Hierarchy", description = "Adds the specified child bill unit to the billing hierarchy provided in the request payload.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The bill unit was added to the hierarchy successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/hierarchy/add/{id}",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addOrUpdateBillUnitHierarchy(@Parameter(in = ParameterIn.PATH, description = "The ID of the child bill unit.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Details about the child bill unit to add to the hierarchy. The minimum required parameters are&colon;<p><ul><li><b>parentBillUnitId</b></li><li><b>arBillInfoRef</b></li></ul>", schema=@Schema()) @Valid @RequestBody BillUnitHierarchy body);


    @Operation(summary = "Change the Validity of a Noncurrency Resource", description = "Changes the validity period for a noncurrency resource.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The validity was changed successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/validity/{id}",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> changeValidity(@Parameter(in = ParameterIn.PATH, description = "The ID of the noncurrency resource.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Information about the validity change. The minimum required parameters are&colon; <ul><li><b>validTo</b></li><li><b>balanceGroupId</b></li><li><b>elementId</b></li></ul>", schema=@Schema()) @Valid @RequestBody ChangeValidity body);


    @Operation(summary = "Create a Bill Unit", description = "Creates a bill unit using the details specified in the request payload.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The bill unit was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BillUnit.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<BillUnit> createBillUnit(@Parameter(in = ParameterIn.DEFAULT, description = "The data for the bill unit. The minimum required parameters are&colon; <ul><li><b>balanceGroups</b></li><li><b>businessProfile</b></li><li><b>creationDate</b></li><li><b>id</b></li><li><b>invoiceTemplate</b></li><li><b>name</b></li><li><b>parentAccountId</b></li><li><b>parentAccountNumber</b></li><li><b>parentCompanyName</b></li><li><b>parentFirstName</b></li><li><b>parentLastName</b></li><li><b>parentSalutation</b></li><li><b>paymentInstrumentName</b></li><li><b>paymentInstrumentRef</b></li><li><b>wholesaleBilling</b></li></ul>", schema=@Schema()) @Valid @RequestBody BillUnit body);


    @Operation(summary = "Create a Balance Transfer", description = "Creates a balance transfer.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The balance was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransferBalanceCreateResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/transferbalance",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<TransferBalanceCreateResponse> createTransferBalance(@Parameter(in = ParameterIn.DEFAULT, description = "The details of the balance transfer to create. The minimum required parameters are: <ul><li>sourceRef</li><li>targetRef</li><li>transferAmount</li></ul> The source and target can be balance group IDs, account IDs, account numbers, service IDs, or service numbers/MSISDN numbers.", schema=@Schema()) @Valid @RequestBody TransferBalance body);


    @Operation(summary = "Create Credit Limits for a Balance Group", description = "Creates credit limits and credit thresholds for the specified currency or noncurrency balance group.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The credit limits and credit thresholds were created successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/creditlimit/{id}",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> creditLimit(@Parameter(in = ParameterIn.PATH, description = "The ID of the balance group.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Include <b>limit</b> set to one of these values&colon;<ul><li><b>null</b>&colon; No change in credit limit.</li><li><b>-1</b>&colon; The credit limit is set to unlimited.</li><li><i>value</i>&colon; The credit limit is set to that value.</li></ul>", schema=@Schema()) @Valid @RequestBody CreditLimit body);


    @Operation(summary = "Get a Bill Unit Summary for an Account", description = "Gets a consolidated summary of all bill units for the specified account.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill units were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AccountSummary.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/account/{id}/summary",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<AccountSummary> getAccountSummary(@Parameter(in = ParameterIn.PATH, description = "The ID for the account.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Balance Groups for a Bill Unit", description = "Gets the list of balance groups with balances and services for the bill unit that matches the specified ID. Balances will include both currency and noncurrency balances.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The balance groups were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BillUnit.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<BillUnit> getBalanceGroups(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Generate a Bill Unit Summary", description = "Create a summary of the bill units that match the specified IDs.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill unit summary information was returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountSummary.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/bill-unit-summary",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<AccountSummary>> getBillUnitSummary(@Parameter(in = ParameterIn.DEFAULT, description = "Information about the bill units.", schema=@Schema()) @Valid @RequestBody List<BillUnit> body);


    @Operation(summary = "Get Bill Units for an Account", description = "Gets the bill units for the account that matches the specified ID.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill unit was returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = BillUnit.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/account/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<BillUnit>> getBillUnits(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to get bill units for.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Child Bill Units", description = "Gets the child bill units of the bill unit with the specified ID.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The child bill units were returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/childs/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getChildsOfBillUnit(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit to get children of.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Balance Transfer Details by Transfer Event ID", description = "Gets the details of the balance transfer for the transfer event that matches the specified ID.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The balance transfer details were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransferBalanceDetails.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/transferbalance/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<TransferBalanceDetails> getTransferBalance(@Parameter(in = ParameterIn.PATH, description = "The ID of the balance transfer event to get.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get Balance Transfer Details", description = "Gets the details of the balance transfer that matches either the balance transfer ID or the source or target type and ID specified in the query parameters.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The balance transfer details were returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TransferBalanceDetails.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/transferbalance",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<TransferBalanceDetails> getTransferBalanceList(@Parameter(in = ParameterIn.QUERY, description = "The ID of the balance transfer to get." ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id, @Parameter(in = ParameterIn.QUERY, description = "The balance group ID, service ID, or service/MSISDN number that was the source of the balance transfer. If you specify this, you must also specify <b>sourceRefType</b>." ,schema=@Schema()) @Valid @RequestParam(value = "sourceRefId", required = false) String sourceRefId, @Parameter(in = ParameterIn.QUERY, description = "The balance group ID, service ID, or service/MSISDN number that was the target of the balance transfer. If you specify this, you must also specify <b>targetRefType</b>." ,schema=@Schema()) @Valid @RequestParam(value = "targetRefId", required = false) String targetRefId, @Parameter(in = ParameterIn.QUERY, description = "The type of the sourceRefId. Can be either <b>balanceGroup</b> or <b>service</b>. If you specify this, you must also specify <b>sourceRefID</b>." ,schema=@Schema()) @Valid @RequestParam(value = "sourceRefType", required = false) String sourceRefType, @Parameter(in = ParameterIn.QUERY, description = "The type of the targetRefId. Can be either <b>balanceGroup</b> or <b>service</b>. If you specify this, you must also specify <b>targetRefID</b>." ,schema=@Schema()) @Valid @RequestParam(value = "targetRefType", required = false) String targetRefType);


    @Operation(summary = "Move a Balance Group", description = "Moves a balance group to a new bill unit or to an existing bill unit.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The balance group was moved successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BillUnit.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/balancegroups/move",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<BillUnit> moveBalanceGroup(@Parameter(in = ParameterIn.DEFAULT, description = "The destination bill units", schema=@Schema()) @Valid @RequestBody List<NewBillUnit> body);


    @Operation(summary = "Remove a Bill Unit from a Hierarchy", description = "Removes the specified bill unit from a billing hierarchy.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The bill unit was removed from the hierarchy successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits/hierarchy/remove/{id}",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> removeBillUnitHierarchy(@Parameter(in = ParameterIn.PATH, description = "The ID of the child bill unit to remove.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Information about the child bill unit to remove from the hierarchy. The minimum required parameters are&colon;<ul><li><b>parentBillUnitId</b></li> <li><b>arBillInfoRef</b></li><li><b>paymentInstrumentRef</b></li></ul>", schema=@Schema()) @Valid @RequestBody BillUnitHierarchy body);


    @Operation(summary = "Update a Bill Unit for an Account", description = "Updates a bill unit for the specified account.", tags={ "Bill Units" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill unit was updated successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BillUnit.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/billunits",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<BillUnit> updateBillUnit(@Parameter(in = ParameterIn.QUERY, description = "Whether the amount due is paid by current parent and you want to create a bill on demand (<b>true</b>) or not (<b>false</b>)." ,schema=@Schema()) @Valid @RequestParam(value = "duePaidByCurrentParent", required = false) Boolean duePaidByCurrentParent, @Parameter(in = ParameterIn.DEFAULT, description = "The data to update for the bill unit.", schema=@Schema()) @Valid @RequestBody BillUnit body);

}

