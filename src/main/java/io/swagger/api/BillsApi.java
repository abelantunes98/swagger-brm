/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ArActionsList;
import io.swagger.model.Bill;
import io.swagger.model.CorrectiveBill;
import io.swagger.model.CorrectiveBillTrail;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-14T12:38:42.664Z[GMT]")
@Validated
public interface BillsApi {

    @Operation(summary = "Create a Bill On Demand", description = "Creates a bill on demand for the specified bill unit.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The bill was created successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/billnow/billunit/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Resource> billNow(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get A/R Actions for a Bill", description = "Gets the A/R actions for the specified bill ID.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The A/R actions were returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = ArActionsList.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred") })
    @RequestMapping(value = "/bills/{id}/ar-actions",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ArActionsList>> getArActions(@Parameter(in = ParameterIn.PATH, description = "The ID for the bill.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The bill number, such as B1728." ,schema=@Schema()) @Valid @RequestParam(value = "number", required = false) String number);


    @Operation(summary = "Get Bill Details by Bill ID", description = "Gets details about the specified bill, such as the due amount, the disputed amount, the cycle start and end dates, the current total, and the adjustment amounts.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The bill details were returned successfully.", content = @Content(mediaType = "application/xml", schema = @Schema(implementation = Bill.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Bill> getBillDetails(@Parameter(in = ParameterIn.PATH, description = "The bill number such as \"B1-111\", or the bill ID such as \"0.0.0.1+-bill+295302434942001779\".", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Account Id" ,schema=@Schema()) @Valid @RequestParam(value = "accountid", required = false) String accountid);


    @Operation(summary = "Get All Bills for an Account", description = "Gets all bills across all bill units for the specified account. You can specify whether to retrieve only open bills.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of bills was returned successfully.", content = @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = Bill.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/account/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Bill>> getBills(@Parameter(in = ParameterIn.PATH, description = "The ID of the account to get bills for.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "Whether to retrieve only open bills (<b>open</b>) or not (blank)." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "The number of bills to get." ,schema=@Schema()) @Valid @RequestParam(value = "count", required = false) Integer count, @Parameter(in = ParameterIn.QUERY, description = "The sort order, which is either ascending (<b>asc</b>) or descending (<b>desc</b>). The default is descending." ,schema=@Schema()) @Valid @RequestParam(value = "order", required = false) String order, @Parameter(in = ParameterIn.QUERY, description = "The type of bill, which can be <b>all</b> (parent and children) or <b>childonly</b> (only children)." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand, @Parameter(in = ParameterIn.QUERY, description = "Whether to get a bill's recurring charges (<b>true</b>) or not (<b>false</b>)." ,schema=@Schema()) @Valid @RequestParam(value = "retrieveRecurringCharges", required = false) String retrieveRecurringCharges);


    @Operation(summary = "Get Bills by Bill Unit", description = "Gets all bills for the bill unit that matches the query criteria.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The list of bills or a single bill in progress was returned successfully.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Bill.class)))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/billunit/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Bill>> getBillsForBillUnit(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill unit", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The type of bill, which can be <b>inprogress</b>, <b>open</b>, or <b>all</b>. The default is <b>open</b>." ,schema=@Schema()) @Valid @RequestParam(value = "type", required = false) String type, @Parameter(in = ParameterIn.QUERY, description = "The number of bills to get." ,schema=@Schema()) @Valid @RequestParam(value = "count", required = false) Integer count, @Parameter(in = ParameterIn.QUERY, description = "The sort order, which is either ascending (<b>asc</b>) or descending (<b>desc</b>). The default is descending." ,schema=@Schema()) @Valid @RequestParam(value = "order", required = false) String order, @Parameter(in = ParameterIn.QUERY, description = "The type of bills to get, which is either <b>all</b> (parent as well as children) or <b>childonly</b> (children only)." ,schema=@Schema()) @Valid @RequestParam(value = "expand", required = false) String expand, @Parameter(in = ParameterIn.QUERY, description = "Whether to retrieve recurring charges of a bill (<b>true</b>) or not (<b>false</b>)." ,schema=@Schema()) @Valid @RequestParam(value = "retrieveRecurringCharges", required = false) String retrieveRecurringCharges);


    @Operation(summary = "Get a Corrective Bill", description = "Gets details about a corrective bill that matches the specified ID.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The corrective bill was returned successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CorrectiveBillTrail.class))),
        
        @ApiResponse(responseCode = "400", description = "The request isn't valid."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/correctivebill/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CorrectiveBillTrail> getCorrectiveBillInfo(@Parameter(in = ParameterIn.PATH, description = "The ID of the corrective bill.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get an Invoice PDF by Bill ID", description = "Gets the invoice PDF for the bill that matches the specified ID. The invoice is retrieved from the Business Intelligence (BI) Publisher web service. This endpoint automatically opens the invoice in PDF format.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The invoice PDF was returned successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/invoice/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> getInvoice(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill, such as 0.0.0.1+-bill+514617.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The bill number." ,schema=@Schema()) @Valid @RequestParam(value = "number", required = false) String number);


    @Operation(summary = "Create a Corrective Bill", description = "Creates a corrective bill for the bill that matches the specified ID.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The corrective bill was created successfully."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/correctivebill/{id}",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> produceCorrectiveBill(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "Information about the corrective bill.", schema=@Schema()) @Valid @RequestBody CorrectiveBill body);


    @Operation(summary = "Transfer a Negative Balance", description = "Transfers a negative balance from a bill to the bills specified in the request body.", tags={ "Bills" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The balance was transferred successfully."),
        
        @ApiResponse(responseCode = "400", description = "The bill doesn't exist."),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred.") })
    @RequestMapping(value = "/bills/{id}/balance/transfer",
        consumes = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> transferNegativeBalance(@Parameter(in = ParameterIn.PATH, description = "The ID of the bill to transfer the negative balance from.", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The details of the bills to transfer the balance to.", schema=@Schema()) @Valid @RequestBody List<Bill> body);

}

